package enigma;

/** Class that represents a rotor in the enigma machine.
 *  @author Charles Lee
 */
class Rotor {

    /** Size of alphabet used for plaintext and ciphertext. */
    static final int ALPHABET_SIZE = 26;

    /** Rotor constructor. takes String PARAM and int SETTING. */
    public Rotor(String param, int setting) {
        name = param;
        _setting = setting;
    }
    /** Instance variable name. */
    private String name;

    /** Return name. */
    String getName() {
        return name;
    }

    /** Assuming that P is an integer in the range 0..25, returns the
     *  corresponding upper-case letter in the range A..Z. */
    static char toLetter(int p) {
        String alphaString = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        String[] alphaString2 = alphaString.split("");
        char A =  alphaString2[p + 1].charAt(0);
        return A;

    }

    /** Assuming that C is an upper-case letter in the range A-Z, return the
     *  corresponding index in the range 0..25. Inverse of toLetter. */
    static int toIndex(char c) {
        String alphaString = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        return alphaString.indexOf(c);
    }
    /** Returns true iff this rotor has a ratchet and can advance. */
    boolean advances() {
        return true;
    }

    /** Returns true iff this rotor has a left-to-right inverse. */
    boolean hasInverse() {
        return true;
    }

    /** Return my current rotational setting as an integer between 0
     *  and 25 (corresponding to letters 'A' to 'Z').  */
    int getSetting() {
        return _setting;
    }

    /** Set getSetting() to POSN.  */
    void set(int posn) {
        assert 0 <= posn && posn < ALPHABET_SIZE;
        _setting = posn;
    }

    /** Return the conversion of P (an integer in the range 0..25)
     *  according to my permutation. */
    int convertForward(int p) {
        char a = toLetter(p);
        int i = 0;
        while (PermutationData.ROTOR_SPECS[i][0] != name) {
            i += 1;
        }
        String b = PermutationData.ROTOR_SPECS[i][1];
        return b.indexOf(a) + 1;
    }

    /** Return the conversion of E (an integer in the range 0..25)
     *  according to the inverse of my permutation. */
    int convertBackward(int e) {
        char a = toLetter(e);
        int i = 0;
        while (PermutationData.ROTOR_SPECS[i][0] != name) {
            i += 1;
        }
        String b = PermutationData.ROTOR_SPECS[i][2];
        return b.indexOf(a) + 1;
    }

    /** Returns true iff I am positioned to allow the rotor to my left
     *  to advance. */
    boolean atNotch() {
        int i = 0;
        while (PermutationData.ROTOR_SPECS[i][0] != name) {
            i += 1;
        }
        if (getSetting() == Integer.parseInt(PermutationData.ROTOR_SPECS[i][3]
                                             )) {
            return true;
        }
        return false;
    }

    /** Advance me one position. */
    void advance() {
        set(getSetting() + 1);
    }

    /** My current setting (index 0..25, with 0 indicating that 'A'
     *  is showing). */
    private int _setting;
}
